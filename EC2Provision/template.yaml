AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Create/Delete alarms and EBS tags for EC2 instance when they are started/terminated.
Metadata:
  AWS::ServerlessRepo::Application:
    Name: AutoOpsEC2Provision 
    Description: Create/Delete alarms and EBS tags for EC2 instance when they are started/terminated.
    Author: whuaning
    SpdxLicenseId: Apache-2.0
    ReadmeUrl: README.md
    SemanticVersion: 0.0.1
Parameters:
  SnsTopicArn:
    Type: String
    Description: Enter SNS topic arn which notifications will send to.
    Default: ""
Resources:
  EC2ProvisionStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: state.asl.json
      DefinitionSubstitutions:
        LoadEC2ProvisionInputFunctionArn: !GetAtt LoadEC2ProvisionInputFunction.Arn
        GetInstanceDetailFunctionArn: !GetAtt GetInstanceDetailFunction.Arn
        GetWindowsVolumesFunctionArn: !GetAtt GetWindowsVolumesFunction.Arn
        GetLinuxVolumesFunctionArn: !GetAtt GetLinuxVolumesFunction.Arn
        CreateLinuxDiskAlarmsFunctionArn: !GetAtt CreateLinuxDiskAlarmsFunction.Arn
        CreateWindowsDiskAlarmsFunctionArn: !GetAtt CreateWindowsDiskAlarmsFunction.Arn
        CreateCPUAlarmsFunctionArn: !GetAtt CreateCPUAlarmsFunction.Arn
        CreateMemoryAlarmsFunctionArn: !GetAtt CreateMemoryAlarmsFunction.Arn
        CreateNetworkAlarmsFunctionArn: !GetAtt CreateNetworkAlarmsFunction.Arn
        CreateHealthCheckAlarmsFunctionArn: !GetAtt CreateHealthCheckAlarmsFunction.Arn
        DeleteEC2AlarmsFunctionArn: !GetAtt DeleteEC2AlarmsFunction.Arn
        GetSSMInformationFunctionArn: !GetAtt GetSSMInformationFunction.Arn
        CreateEbsTagsFromEc2FunctionArn: !GetAtt CreateEbsTagsFromEc2Function.Arn
        NotifySnsFunctionArn: !GetAtt NotifySnsFunction.Arn
      Events:
        CloudWatchEvent:
          Type: CloudWatchEvent 
          Properties:
            Pattern:
              source:
                - aws.ec2
              detail-type:
                - "EC2 Instance State-change Notification"
              detail:
                state: 
                  - running
                  - stopping
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref LoadEC2ProvisionInputFunction 
        - LambdaInvokePolicy:
            FunctionName: !Ref GetInstanceDetailFunction 
        - LambdaInvokePolicy:
            FunctionName: !Ref GetWindowsVolumesFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref GetLinuxVolumesFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateLinuxDiskAlarmsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateWindowsDiskAlarmsFunction 
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateCPUAlarmsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateMemoryAlarmsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateNetworkAlarmsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateHealthCheckAlarmsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref DeleteEC2AlarmsFunction 
        - LambdaInvokePolicy:
            FunctionName: !Ref GetSSMInformationFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateEbsTagsFromEc2Function
        - LambdaInvokePolicy:
            FunctionName: !Ref NotifySnsFunction
  CreateEbsTagsFromEc2Function:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.7
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: CreateEbsTagsFromEc2
      Policies: [AmazonEC2FullAccess]
      Environment:
        Variables:
          TAGS_TO_SYNC: 'Name,Project'
  CreateCPUAlarmsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.7
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: CreateCPUAlarms
      Policies: [CloudWatchFullAccess]
      Environment:
        Variables:
          CPU_THRESHOLD: 80
  CreateMemoryAlarmsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.7
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: CreateMemoryAlarms
      Policies: [CloudWatchFullAccess]
      Environment:
        Variables:
          MEMORY_THRESHOLD: 80
  CreateNetworkAlarmsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.7
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: CreateNetworkAlarms
      Policies: [CloudWatchFullAccess]
      Environment:
        Variables:
          EXCEEDED_BYTES_THRESHOLD: 80
  CreateHealthCheckAlarmsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.7
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: CreateHealthCheckAlarms
      Policies: [CloudWatchFullAccess]
      Environment:
        Variables:
          MEMORY_THRESHOLD: 80
  GetInstanceDetailFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.7
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: GetInstanceDetail
      Policies: [AmazonEC2ReadOnlyAccess]
  GetSSMInformationFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.7
      Description: ''
      MemorySize: 128
      Timeout: 120
      CodeUri: GetSSMInformation
      Policies: [AmazonSSMFullAccess]       
      Environment:
        Variables:
          FREE_THRESHOLD: 20
  GetLinuxVolumesFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.7
      Description: ''
      MemorySize: 128
      Timeout: 120
      CodeUri: GetLinuxVolumes
      Policies: [AmazonSSMFullAccess]
      Environment:
        Variables:
          SSM_DOCNAME: !Ref GetLinuxVolumesDoc
  CreateLinuxDiskAlarmsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.7
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: CreateLinuxDiskAlarms
      Policies: [CloudWatchFullAccess]
      Environment:
        Variables:
          USAGE_THRESHOLD: 80
  LoadEC2ProvisionInputFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.7
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: LoadEC2ProvisionInput
  GetWindowsVolumesFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.7
      Description: ''
      MemorySize: 128
      Timeout: 120
      CodeUri: GetWindowsVolumes
      Policies: [AmazonSSMFullAccess]
      Environment:
        Variables:
          SSM_DOCNAME: !Ref GetWindowsVolumesDoc
  DeleteEC2AlarmsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.7
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: DeleteEC2Alarms
      Policies: [CloudWatchFullAccess]  
  NotifySnsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.7
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: NotifySns
      Policies: [AmazonEC2ReadOnlyAccess, AmazonSNSFullAccess]
      Environment:
        Variables:
          SNSTopicArn: !Ref SnsTopicArn    
  CreateWindowsDiskAlarmsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.7
      Description: ''
      MemorySize: 128
      Timeout: 30
      CodeUri: CreateWindowsDiskAlarms
      Policies: [CloudWatchFullAccess]       
      Environment:
        Variables:
          FREE_THRESHOLD: 20
  GetWindowsVolumesDoc:
    Type: AWS::SSM::Document
    Properties: 
      DocumentType: Command
      Content: >
        {
          "schemaVersion": "2.2",
          "description": "List Disks on Windows Instance",
          "parameters": {},
          "mainSteps": [
            {
              "action": "aws:runPowerShellScript",
              "name": "GetWindowsVolumesDoc",
              "inputs": {
                "runCommand": [
                  "function Get-EC2InstanceMetadata {",
                  "  param([string]$Path)",
                  "  (Invoke-WebRequest -Uri \"http://169.254.169.254/latest/$Path\" -UseBasicParsing).Content",
                  "}",
                  "function Convert-SCSITargetIdToDeviceName {",
                  "  param([int]$SCSITargetId)",
                  "  If ($SCSITargetId -eq 0) {",
                  "    return \"sda1\"",
                  "  }",
                  "  $deviceName = \"xvd\"",
                  "  If ($SCSITargetId -gt 25) {",
                  "    $deviceName += [char](0x60 + [int]($SCSITargetId / 26))",
                  "  }",
                  "  $deviceName += [char](0x61 + $SCSITargetId % 26)",
                  "  return $deviceName",
                  "}",
                  "Try {",
                  "  $InstanceId = Get-EC2InstanceMetadata \"meta-data/instance-id\"",
                  "  $AZ = Get-EC2InstanceMetadata \"meta-data/placement/availability-zone\"",
                  "  $Region = $AZ.Remove($AZ.Length - 1)",
                  "  $BlockDeviceMappings = (Get-EC2Instance -Region $Region -Instance $InstanceId).Instances.BlockDeviceMappings",
                  "  $VirtualDeviceMap = @{}",
                  "  (Get-EC2InstanceMetadata \"meta-data/block-device-mapping\").Split(\"`n\") | ForEach-Object {",
                  "    $VirtualDevice = $_",
                  "    $BlockDeviceName = Get-EC2InstanceMetadata \"meta-data/block-device-mapping/$VirtualDevice\"",
                  "    $VirtualDeviceMap[$BlockDeviceName] = $VirtualDevice",
                  "    $VirtualDeviceMap[$VirtualDevice] = $BlockDeviceName",
                  "  }",
                  "}",
                  "Catch {",
                  "  Write-Host \"Could not access the AWS API, therefore, VolumeId is not available. ",
                  "Verify that you provided your access keys.\" -ForegroundColor Yellow",
                  "}",
                  "",
                  "Get-disk | ForEach-Object {",
                  "  $DriveLetter = $null",
                  "  $VolumeName = $null",
                  "",
                  "  $DiskDrive = $_",
                  "  $Disk = $_.Number",
                  "  $Partitions = $_.NumberOfPartitions",
                  "  $EbsVolumeID = $_.SerialNumber -replace \"_[^ ]*$\" -replace \"vol\", \"vol-\"",
                  "  Get-Partition -DiskId $_.Path | ForEach-Object {",
                  "    if ($_.DriveLetter -ne \"\") {",
                  "      $DriveLetter = $_.DriveLetter",
                  "      $VolumeName = (Get-PSDrive | Where-Object {$_.Name -eq $DriveLetter}).Description",
                  "    }",
                  "  } ",
                  "",
                  "  If ($DiskDrive.path -like \"*PROD_PVDISK*\") {",
                  "    $BlockDeviceName = Convert-SCSITargetIdToDeviceName((Get-WmiObject -Class Win32_Diskdrive | Where-Object {$_.DeviceID -eq (\"\\\\.\\PHYSICALDRIVE\" + $DiskDrive.Number) }).SCSITargetId)",
                  "    $BlockDeviceName = \"/dev/\" + $BlockDeviceName",
                  "    $BlockDevice = $BlockDeviceMappings | Where-Object { $BlockDeviceName -like \"*\"+$_.DeviceName+\"*\" }",
                  "    $EbsVolumeID = $BlockDevice.Ebs.VolumeId ",
                  "    $VirtualDevice = If ($VirtualDeviceMap.ContainsKey($BlockDeviceName)) { $VirtualDeviceMap[$BlockDeviceName] } Else { $null }",
                  "  }",
                  "  ElseIf ($DiskDrive.path -like \"*PROD_AMAZON_EC2_NVME*\") {",
                  "    $BlockDeviceName = Get-EC2InstanceMetadata \"meta-data/block-device-mapping/ephemeral$((Get-WmiObject -Class Win32_Diskdrive | Where-Object {$_.DeviceID -eq (\"\\\\.\\PHYSICALDRIVE\"+$DiskDrive.Number) }).SCSIPort - 2)\"",
                  "    $BlockDevice = $null",
                  "    $VirtualDevice = If ($VirtualDeviceMap.ContainsKey($BlockDeviceName)) { $VirtualDeviceMap[$BlockDeviceName] } Else { $null }",
                  "  }",
                  "  ElseIf ($DiskDrive.path -like \"*PROD_AMAZON*\") {",
                  "    $BlockDevice = \"\"",
                  "    $BlockDeviceName = ($BlockDeviceMappings | Where-Object {$_.ebs.VolumeId -eq $EbsVolumeID}).DeviceName",
                  "    $VirtualDevice = $null",
                  "  }",
                  "  Else {",
                  "    $BlockDeviceName = $null",
                  "    $BlockDevice = $null",
                  "    $VirtualDevice = $null",
                  "  }",
                  "  New-Object PSObject -Property @{",
                  "    Disk          = $Disk;",
                  "    Partitions    = $Partitions;",
                  "    DriveLetter   = If ($DriveLetter -eq $null) { \"N/A\" } Else { $DriveLetter };",
                  "    EbsVolumeId   = If ($EbsVolumeID -eq $null) { \"N/A\" } Else { $EbsVolumeID };",
                  "    Device        = If ($BlockDeviceName -eq $null) { \"N/A\" } Else { $BlockDeviceName };",
                  "    VirtualDevice = If ($VirtualDevice -eq $null) { \"N/A\" } Else { $VirtualDevice };",
                  "    VolumeName    = If ($VolumeName -eq $null) { \"N/A\" } Else { $VolumeName };",
                  "  }",
                  "} | Sort-Object Disk | Format-Table -AutoSize -Property Disk, Partitions, DriveLetter, EbsVolumeId, Device, VirtualDevice, VolumeName"
                ]
              }
            }
          ]
        } 
  GetLinuxVolumesDoc:
    Type: AWS::SSM::Document
    Properties: 
      DocumentType: Command
      Content: >
        {
          "schemaVersion": "2.2",
          "description": "List Disks on Linux Instance",
          "parameters": {},
          "mainSteps": [
            {
              "action": "aws:runShellScript",
              "name": "GetLinuxVolumes",
              "inputs": {
                "runCommand": [
                  "df -lT | grep ^/dev/"
                ]
              }
            }
          ]
        }
Outputs:
  EC2ProvisionStateMachine:
    Description: "ARN of EC2ProvisionStateMachine"
    Value: !Ref EC2ProvisionStateMachine 
